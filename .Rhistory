if(round(runif(1))) 'Female' else 'Male'
round(runif(1))?'Female':'Male'
round(runif(1))?'Female':'Male'
round(runif(1))?'Female':'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
if(round(runif(1))) 'Female' else 'Male'
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
source("C:/Users/tjc52/OneDrive/Desktop/Edge/Scripts/create_New_Data.R")
View(db_sheets)
shiny::runApp('Dashboard')
runApp('C:/Users/tjc52/GitHub/Athlete_Management_System/Dashboard')
runApp('Dashboard')
?layout_columns
runApp('Dashboard')
install.packages(shinySQLite)
install.packages('shinySQLite')
devtools::install_github('nasilabednego/shinySQLite')
install.packages('devtools')
devtools::install_github('nasilabednego/shinySQLite')
runApp('Dashboard')
shinyApp(
ui = dashboardPage(
dashboardHeader(
tags$li(class = "dropdown", tags$a(href = "", class = "my_class", "Help", target="_blank")),
tags$li(class = "dropdown", tags$a(href = "", class = "my_class", "Contact us")),
tags$li(class = "dropdown", actionLink("ChangePassword", "Change Password", class = "my_class"))),
dashboardSidebar(),
dashboardBody(tags$head(
tags$style(HTML("
.my_class {
font-weight: bold;
color:white;
}"))
)),
title = "Dashboard example"
),
server = function(input, output) { }
)
library(shiny)
library(shinydashboard)
shinyApp(
ui = dashboardPage(
dashboardHeader(
tags$li(class = "dropdown", tags$a(href = "", class = "my_class", "Help", target="_blank")),
tags$li(class = "dropdown", tags$a(href = "", class = "my_class", "Contact us")),
tags$li(class = "dropdown", actionLink("ChangePassword", "Change Password", class = "my_class"))),
dashboardSidebar(),
dashboardBody(tags$head(
tags$style(HTML("
.my_class {
font-weight: bold;
color:white;
}"))
)),
title = "Dashboard example"
),
server = function(input, output) { }
)
runApp('Dashboard')
?updateSelectInput
?observeEvent
runApp('Dashboard')
runApp('Dashboard')
googlesheets4::sheet_names(sheet_ID)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?dbWriteTable
runApp('Dashboard')
?onstop
?onStop
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?formatDate
?toDateString
runApp('Dashboard')
df <- data.frame(Date = 0)
df %>% formatDate('Date')
datatable(df) %>% formatDate('Date')
df <- data.frame(Date = 1)
datatable(df) %>% formatDate('Date')
df <- data.frame(Date = 3600*24)
datatable(df) %>% formatDate('Date')
df <- data.frame(Date = 3600000000)
datatable(df) %>% formatDate('Date')
datatable(df) %>% formatDate('Date')
df <- data.frame(Date = 3600000000 + 3600*24)
datatable(df) %>% formatDate('Date')
View(df)
df <- data.frame(Date = 3600000000 + 3600*24*1000)
datatable(df) %>% formatDate('Date')
runApp('Dashboard')
new_DOB       <- sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer()
new_DOB       <- new_DOB * 24 * 3600
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
sample(seq(as.Date('1960/01/01'),
as.Date('2005/12/31'),
by = 'day'), 1) %>% as.integer() * 3600 * 24
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?showcase_left_center
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
sheet_names(sheet_ID)
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
runApp('Dashboard')
runif(1, min = -1.5, max = 1.5)
runif(1, min = -1.5, max = 1.5)
runif(1, min = -1.5, max = 1.5)
runif(1, min = -1.5, max = 1.5)
runif(1, min = -1.5, max = 1.5)
runif(1, min = -1.5, max = 1.5)
runif(1, min = -1.5, max = 1.5)
runif(1, min = -1.5, max = 1.5)
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
runApp('Dashboard')
sounds <- c('cat' = 'meow', 'dog' = 'woof')
is.null(sounds['cow'])
sounds$cow
sounds$cat
sounds['cow']
is.na(sounds['cow'])
is.na(sounds['cat'])
athlete_id = 1
sounds[athlete_id] = 'tanner'
sounds
athlete_id = 3
sounds[athlete_id] = 'tanner'
sounds
letters
for (id in 1:10) {
test_dict[id] <- letters[id]
}
test_dict <- c()
for (id in 1:10) {
test_dict[id] <- letters[id]
}
test_dict
for (id in 1:10) {
test_dict[id] <- letters[1:id]
}
test_dict
for (id in 1:10) {
test_dict[id] <- [letters[1:id]]
sounds['cat'] <- sample(letters, 2)
sounds['cat'] <- list(sample(letters, 2))
sounds
sounds['cat']
sample(sounds['cat'], 1)
sounds$cat
sample(sounds$cat, 1)
sample(sounds$cat, 1)
sample(sounds$cat, 1)
sample(sounds$cat, 1)
sample(sounds$cat, 1)
sample(sounds$cat, 1)
sample(sounds$cat, 1)
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
rm(sounds)
sounds <- c()
is.na(sounds[athlete_id])
is.null(sounds[athlete_id])
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
lifts <- list()
lift_ids <- 1:100
athlete_id <- 1
lifts[athlete_id] <- list(sample(lift_ids, 10))
lifts
lifts[1]
lifts[2]
lists[[1]]
lifts[[1]]
lenght(lifts[[1]])
length(lifts[[1]])
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
length(lifts[[athlete_id]])
lifts <- list()
if (is.null(lifts[athlete_id])) {
lifts[athlete_id] <- list(sample(lift_ids$Lift_ID, 10))
}
random_check <- runif(1)
print(typeof(lifts))
print(length(lifts[[athlete_id]]))
lifts[[athlete_id]]
lifts
is.null(lifts[athlete_id])
lifts[athlete_id]
lifts[[athlete_id]]
lifts[athlete_id]
length(lifts[athlete_id])
is.null(lifts[athlete_id][1])
lifts[athlete_id][1]
lifts[athlete_id] <- list(sample(lift_ids$Lift_ID, 10))
lifts[athlete_id] <- list(sample(lift_ids, 10))
lifts[athlete_id][1]
is.null(lifts[athlete_id][1])
length(lifts[athlete_id])
length(lifts[athlete_id][1])
length(lifts[[athlete_id]])
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
runApp('Dashboard')
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
lifts
lifts <- list()
lifts
lifts[[athlete_id]]
length(lifts[[athlete_id]])
length(lifts[athlete_id])
length(lifts[[athlete_id]]) > 0
exists(lifts[[athlete_id]])
lifts[athlete_id]
is.null(lifts[athlete_id])
lifts[athlete_id] == NULL
is.null(lifts[athlete_id][1])
is.na(lifts[athlete_id][1])
athlete_id %in% lifts
athlete_id %in% names(lifts)
lifts[athlete_id] <- c(1:10)
lifts[athlete_id] <- list(1:10)
athlete_id %in% names(lifts)
athlete_id %in% lifts
names(lifts)
lifts[as.character(athlete_id)] <- list(1:10)
names(lifts)
athlete_id %in% lifts
as.character(athlete_id) %in% lifts
lifts[1654321]
lifts$
try(lifts[[athlete_id]])
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
lifts[[1]]
lifts[[athlete_id]]
debugSource("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
print('Error')
print(lifts[athlete_id])
print(lifts[[athlete_id]])
tryCatch({
length(lifts[[athlete_id]])
}, error = function(e) {
lifts[athlete_id] <- list(sample(lift_ids$Lift_ID, 10))
print('Error')
print(lifts[athlete_id])
print(lifts[[athlete_id]])
})
random_check <- runif(1)
if (random_check < 0.9) {
createNewWeight(con, sheet_ID, athlete_id, today)
}
if (random_check < 0.66) {
if (athlete_id == 1) {
print('Before function')
print(lifts[[athlete_id]])
}
createNewSession(con, sheet_ID, athlete_id, lifts[[athlete_id]], today)
}
for (athlete_id in athlete_ids$Athlete_ID) {
# if (length(lifts[[athlete_id]]) < 10) {
#   lifts[athlete_id] <- list(sample(lift_ids$Lift_ID, 10))
# }
tryCatch({
length(lifts[[athlete_id]])
}, error = function(e) {
lifts[athlete_id] <- list(sample(lift_ids$Lift_ID, 10))
print('Error')
print(lifts[athlete_id])
print(lifts[[athlete_id]])
})
random_check <- runif(1)
if (random_check < 0.9) {
createNewWeight(con, sheet_ID, athlete_id, today)
}
if (random_check < 0.66) {
if (athlete_id == 1) {
print('Before function')
print(lifts[[athlete_id]])
}
createNewSession(con, sheet_ID, athlete_id, lifts[[athlete_id]], today)
}
}
today <- today + 3600 * 24
for (day in 1:50) {
random_check <- runif(1)
if (random_check < 0.2) {
query <- 'SELECT * FROM ATHLETES'
athlete_df <- as.data.frame(dbGetQuery(con,
query))
createNewAthlete(con, athlete_df, sheet_ID)
}
athlete_ids <- dbGetQuery(con,
statement = 'SELECT DISTINCT Athlete_ID FROM ATHLETES')
lift_ids    <- dbGetQuery(con,
statement = 'SELECT DISTINCT Lift_ID FROM LIFTS')
for (athlete_id in athlete_ids$Athlete_ID) {
# if (length(lifts[[athlete_id]]) < 10) {
#   lifts[athlete_id] <- list(sample(lift_ids$Lift_ID, 10))
# }
tryCatch({
length(lifts[[athlete_id]])
}, error = function(e) {
lifts[athlete_id] <- list(sample(lift_ids$Lift_ID, 10))
print('Error')
print(lifts[athlete_id])
print(lifts[[athlete_id]])
})
random_check <- runif(1)
if (random_check < 0.9) {
createNewWeight(con, sheet_ID, athlete_id, today)
}
if (random_check < 0.66) {
if (athlete_id == 1) {
print('Before function')
print(lifts[[athlete_id]])
}
createNewSession(con, sheet_ID, athlete_id, lifts[[athlete_id]], today)
}
}
today <- today + 3600 * 24
}
debugSource("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
View(athlete_ids)
lifts[[athlete_id]]
tryCatch({
lifts[[athlete_id]]
}, error = function(e) {
lifts[athlete_id] <- list(sample(lift_ids$Lift_ID, 10))
print('Error')
print(lifts[athlete_id])
print(lifts[[athlete_id]])
})
sample(1:100, 10)
list(sample(1:100, 10))
lifts[1] <- list(sample(1:100, 10))
lifts
rm(lifts)
lifts <- list()
lifts[1] <- list(sample(1:100, 10))
lifts
lifts[1]
lifts[[1]]
lists[[2]]
lifts[[2]]
lifts[2]
lifts[2][1]
is.null(lifts[2][1])
'2' %in% lifts
'1' %in% lifts
1 %in% lifts
append(lifts, list(sample(1:100, 10)))
lifts
athlete_id = 2
lifts <- list(lifts, athlete_id = list(sample(1:100, 10)))
lifts
rm(lifts)
lifts <- list(sample(1:100, 10))
lifts
lifts <- append(lifts, list(sample(1:100, 10)))
lifts
names(lifts)
lifts[[athlete_id]]
athlete_id = 6
lifts <- append(lifts, athlete_id = list(sample(1:100, 10)))
lifts <- append(lifts, list(athlete_id = sample(1:100, 10)))
lifts
lifts <- append(lifts, list(!!athlete_id = sample(1:100, 10)))
rm(lifts)
athlete_id <- sample(1:100, 1)
ids <- list()
lifts <- list()
ids <- append(id, athlete_id)
ids
rm(ids)
ids <- list()
ids <- append(ids, athlete_id)
ids
lifts <- append(lifts, list(sample(1:100, 10)))
lifts
names(lifts) <- ids
lifts
lifts[athlete_id]
lifts[[athlete_id]]
lifts[[as.character(athlete_id)]]
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
?sheet_write
runApp('Dashboard')
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui)
runApp('Dashboard')
runApp('Dashboard')
cal_demo_data()
runApp('Dashboard')
?cal_props
palette(rainbow(6))
library(randomcoloR)
install.packages('randomcoloR')
library(randomcoloR)
palette <- distinctColorPalette(nrow(unique(cal_data$title)))
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
unique(lift_choices)
nrow(unique(lift_choices))
distinctColorPalette(nrow(unique(lift_choices)))
distinctColorPalette(nrow(unique(lift_choices))) %>%typeof()
distinctColorPalette(nrow(unique(lift_choices))) %>% list() %>% typeof()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?distinctColorPalette
runApp('Dashboard')
