library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
googlesheets4::sheets_auth()
gs4_auth()
#----------------------------------------------------------
# Authentication
#----------------------------------------------------------
options(gargle_oauth_cache = '.secrets')
gs4_auth()
list.files('.secrets/')
gs4_deauth()
runApp('Dashboard')
runApp('Dashboard')
# check the value of the option, if you like
#gargle::gargle_oauth_cache()
# trigger auth on purpose to store a token in the specified cache
# a broswer will be opened
googlesheets4::gs4_auth()
runApp('Dashboard')
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googledrive,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
runApp('Dashboard')
#----------------------------------------------------------
# Authentication
#----------------------------------------------------------
googledrive::drive_auth(cache = ".secrets", email = "tjc521123@gmail.com")
googlesheets4::gs4_auth(token = drive_token())
runApp('Dashboard')
options(gargle_oauth_cache = '.secrets')
gargle::gargle_oauth_cache()
drive_auth()
list.files('.secrets/')
options(gargle_oauth_cache = '.secrets')
gargle::gargle_oauth_cache()
drive_auth()
list.files('.secrets/')
runApp('Dashboard')
setwd('Dashboard')
options(gargle_oauth_cache = '.secrets')
gargle::gargle_oauth_cache()
drive_auth()
list.files('.secrets/')
gs4_deauth()
runApp()
options(gargle_oauth_cache = '.secrets')
gargle::gargle_oauth_cache()
drive_auth()
list.files('.secrets/')
drive_find(n_max = 5)
here::here('.secrets')
runApp()
runApp()
runApp()
gs4_deauth()
runApp()
gs4_auth()
runApp()
runApp()
here::here('.secrets')
setwd('Dashboard')
setwd('/Dashboard')
runApp()
runApp()
runApp()
runApp()
runApp()
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googledrive,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
setwd('Dashboard')
#----------------------------------------------------------
# Authentication
#----------------------------------------------------------
options(
gargle_oauth_email = TRUE,
gargle_oauth_cache = '.secrets'
)
drive_auth()
?gs4_auth_configure
?gs4_auth
gs4_auth()
#----------------------------------------------------------
# Authentication
#----------------------------------------------------------
# options(
#   gargle_oauth_email = 'tjc521123@gmail.com',
#   gargle_oauth_cache = '.secrets',
#   gargle_verbosity = 'debug'
# )
gs4_auth(
email = 'tjc521123@gmail.com',
cache = '.secrets',
scopes = 'drive'
)
runApp()
gs4_deauth()
runApp()
con <- dbConnect(RSQLite::SQLite(), "")
sheet_ID <- '1PK5nDP-xsz9165HUxEMZFN8p5v9FYIiOJYK5KEfHc-g'
sheet_names <- sheet_names(sheet_ID)
runApp()
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googledrive,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
runApp('Dashboard')
strsplit('Tanner', split = 'a')
strsplit('Clark, Tanner', split = ', ')
strsplit('Clark, Tanner', split = ', ')[1]
strsplit('Clark, Tanner', split = ', ')[[1]]
strsplit('Clark, Tanner', split = ', ')[[1]][1]
strsplit('Clark, Tanner', split = ', ')[[1]][2]
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
func_name <- readline(prompt = 'Enter function name: ')
func_def  <- readline(prompt = 'Enter function def.: ')
full_func <- paste(func_name,
"<-function(x) {",
func_def,
"}")
parse(text = full_func) %>% eval()
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googledrive,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
parse(text = full_func) %>% eval()
func_name <- readline(prompt = 'Enter function name: ')
func_def  <- readline(prompt = 'Enter function def.: ')
full_func <- paste(func_name,
"<-function(x) {",
func_def,
"}")
parse(text = full_func) %>% eval()
test_func(2)
full_func
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH exp_tbl AS
(SELECT 1
UNION ALL
SELECT * FROM exp_tbl LIMIT 10))') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH exp_tbl AS
(SELECT 1
UNION ALL
SELECT * FROM exp_tbl LIMIT 10)') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH exp_tbl AS
(SELECT 1
UNION ALL
SELECT * FROM exp_tbl LIMIT 10)
SELECT * FROM exp_tbl') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE exert(x) AS (
SELECT 1
UNION ALL
SELECT exp(x+1) FROM exert WHERE x < 10
)
SELECT * FROM exert') %>%
View()
exp(2) * exp(10) / exp(0)
exp(2) * exp(10) / exp(1)
exp(2 + 10 - 1)
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE exert(x) AS (
SELECT 0
UNION ALL
SELECT exp(x+1) FROM exert WHERE x < 10
)
SELECT * FROM exert') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE exert(x) AS (
SELECT 1
UNION ALL
SELECT exp((x - 1) + 1) FROM exert WHERE x < 10
)
SELECT * FROM exert') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x) AS (
SELECT 1
UNION ALL
SELECT x+1 FROM ten WHERE x<10
)
SELECT * FROM ten;') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x) AS (
SELECT 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten;') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten;') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten;') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, sum(exp(x)) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT x, e, sum(e) FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT x, e, sum(e) OVER (PARTITION BY x) FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT x, e, sum(e) OVER (ORDER BY x) FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x), SUM(e) OVER (ORDER BY x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e, s) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x), SUM(e) OVER (ORDER BY x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e, s) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x), exp(x) + exp(x + 1) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e, s) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x), exp(x - 1) + exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?ylim
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?parse
parse(c('a', 'b')[1])
eval(c('a', 'b')[1])
eval(!!c('a', 'b')[1])
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
metric_choices[1]
?selectInput
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?str_replace
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
install.packages(simplegraphdb)
devtools::install_github("https://github.com/mikeasilva/simplegraphdb")
library(simplegraphdb)
apple <- "apple.sqlite"
initialize(apple)
initialize(apple)
apple <- "apple.sqlite"
initialize(apple, schema_file = '')
atomic(apple, add_node(list("name" = "Apple Computer Company", "type" = c("company", "start-up"), "founded" = "April 1, 1976"), 1))
atomic(apple, add_node(list("name" = "Steve Wozniak", "type" = c("person", "engineer", "founder")), 2))
atomic(apple, add_node(list("name" = "Steve Jobs", "type" = c("person", "designer", "founder")), 3))
atomic(apple, add_node(list("name" = "Ronald Wayne", "type" = c("person", "administrator", "founder")), 4))
atomic(apple, add_node(list("name" = "Mike Markkula", "type" = c("person", "investor")), 5))
atomic(apple, connect_nodes(2, 1, list("action" = "founded")))
atomic(apple, connect_nodes(3, 1, list("action" = "founded")))
atomic(apple, connect_nodes(4, 1, list("action" = "founded")))
atomic(apple, connect_nodes(5, 1, list("action" = "invested", "equity" = 80000, "debt" = 170000)))
atomic(apple, connect_nodes(1, 4, list("action" = "divested", "amount" = 800, "date" = "April 12, 1976")))
atomic(apple, connect_nodes(2, 3))
atomic(apple, upsert_node(2, list("nickname" = "Woz"), apple))
install.packages('mongolite')
library(tidyverse)
library(knitr)
library(markdown)
library(mongolite)
mongo_con <- mongo(collection = 'vidPrac', db = 'video_practice')
shiny::runApp('Dashboard')
?dbWriteTable
dbCreateTable()
?dbCreateTable
con <- dbConnect(RSQLite::SQLite(), "")
dbCreateTable(conn = con,
name = 'ATHLETES',
fields = c(Athlete_ID = 'INTEGER PRIMARY KEY',
Athlete_FirstName = 'TEXT',
Athlete_LastName  = 'TEXT',
Athlete_DOB       = 'DATE',
Athlete_Gender    = 'BOOL'))
dbExecute(
conn = con,
statement = 'CREATE TABLE IF NOT EXISTS ATHLETES (
Athlete_ID INTEGER AUTO_INCREMENT,
Athlete_FirstName TEXT,
Athlete_LastName  TEXT,
Athlete_DOB       DATE,
Athlete_Gender    BOOL,
PRIMARY KEY (Athlete_ID)
)'
)
dbDisconnect(con)
con <- dbConnect(RSQLite::SQLite(), "")
dbExecute(
conn = con,
statement = 'CREATE TABLE IF NOT EXISTS ATHLETES (
Athlete_ID INTEGER AUTO_INCREMENT,
Athlete_FirstName TEXT,
Athlete_LastName  TEXT,
Athlete_DOB       DATE,
Athlete_Gender    BOOL,
PRIMARY KEY (Athlete_ID)
)'
)
View(con)
runApp('Dashboard')
