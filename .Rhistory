lifts[[as.character(athlete_id)]]
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
source("C:/Users/tjc52/GitHub/AMS_Dashboard/Scripts/create_New_Data.R")
?sheet_write
runApp('Dashboard')
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui)
runApp('Dashboard')
runApp('Dashboard')
cal_demo_data()
runApp('Dashboard')
?cal_props
palette(rainbow(6))
library(randomcoloR)
install.packages('randomcoloR')
library(randomcoloR)
palette <- distinctColorPalette(nrow(unique(cal_data$title)))
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
unique(lift_choices)
nrow(unique(lift_choices))
distinctColorPalette(nrow(unique(lift_choices)))
distinctColorPalette(nrow(unique(lift_choices))) %>%typeof()
distinctColorPalette(nrow(unique(lift_choices))) %>% list() %>% typeof()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?distinctColorPalette
runApp('Dashboard')
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
rsconnect::setAccountInfo(name='tjc521123', token='2F961F5558E5DD26EA7DB76EEE08AEB4', secret='iSvSxqW44eVYbddMXcpMmdVYF2plpCCNhtBu29lm')
sheets_auth()
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
googlesheets4::sheets_auth()
gs4_auth()
#----------------------------------------------------------
# Authentication
#----------------------------------------------------------
options(gargle_oauth_cache = '.secrets')
gs4_auth()
list.files('.secrets/')
gs4_deauth()
runApp('Dashboard')
runApp('Dashboard')
# check the value of the option, if you like
#gargle::gargle_oauth_cache()
# trigger auth on purpose to store a token in the specified cache
# a broswer will be opened
googlesheets4::gs4_auth()
runApp('Dashboard')
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googledrive,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
runApp('Dashboard')
#----------------------------------------------------------
# Authentication
#----------------------------------------------------------
googledrive::drive_auth(cache = ".secrets", email = "tjc521123@gmail.com")
googlesheets4::gs4_auth(token = drive_token())
runApp('Dashboard')
options(gargle_oauth_cache = '.secrets')
gargle::gargle_oauth_cache()
drive_auth()
list.files('.secrets/')
options(gargle_oauth_cache = '.secrets')
gargle::gargle_oauth_cache()
drive_auth()
list.files('.secrets/')
runApp('Dashboard')
setwd('Dashboard')
options(gargle_oauth_cache = '.secrets')
gargle::gargle_oauth_cache()
drive_auth()
list.files('.secrets/')
gs4_deauth()
runApp()
options(gargle_oauth_cache = '.secrets')
gargle::gargle_oauth_cache()
drive_auth()
list.files('.secrets/')
drive_find(n_max = 5)
here::here('.secrets')
runApp()
runApp()
runApp()
gs4_deauth()
runApp()
gs4_auth()
runApp()
runApp()
here::here('.secrets')
setwd('Dashboard')
setwd('/Dashboard')
runApp()
runApp()
runApp()
runApp()
runApp()
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googledrive,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
setwd('Dashboard')
#----------------------------------------------------------
# Authentication
#----------------------------------------------------------
options(
gargle_oauth_email = TRUE,
gargle_oauth_cache = '.secrets'
)
drive_auth()
?gs4_auth_configure
?gs4_auth
gs4_auth()
#----------------------------------------------------------
# Authentication
#----------------------------------------------------------
# options(
#   gargle_oauth_email = 'tjc521123@gmail.com',
#   gargle_oauth_cache = '.secrets',
#   gargle_verbosity = 'debug'
# )
gs4_auth(
email = 'tjc521123@gmail.com',
cache = '.secrets',
scopes = 'drive'
)
runApp()
gs4_deauth()
runApp()
con <- dbConnect(RSQLite::SQLite(), "")
sheet_ID <- '1PK5nDP-xsz9165HUxEMZFN8p5v9FYIiOJYK5KEfHc-g'
sheet_names <- sheet_names(sheet_ID)
runApp()
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googledrive,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
runApp('Dashboard')
strsplit('Tanner', split = 'a')
strsplit('Clark, Tanner', split = ', ')
strsplit('Clark, Tanner', split = ', ')[1]
strsplit('Clark, Tanner', split = ', ')[[1]]
strsplit('Clark, Tanner', split = ', ')[[1]][1]
strsplit('Clark, Tanner', split = ', ')[[1]][2]
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
func_name <- readline(prompt = 'Enter function name: ')
func_def  <- readline(prompt = 'Enter function def.: ')
full_func <- paste(func_name,
"<-function(x) {",
func_def,
"}")
parse(text = full_func) %>% eval()
library(pacman)
pacman::p_load(shiny,
tidyverse,
forstringr,
plotly,
lubridate,
bslib,
bsicons,
shinyjs,
DT,
digest,
googledrive,
googlesheets4,
DBI,
RSQLite,
shinybusy,
toastui,
randomcoloR,
rsconnect)
parse(text = full_func) %>% eval()
func_name <- readline(prompt = 'Enter function name: ')
func_def  <- readline(prompt = 'Enter function def.: ')
full_func <- paste(func_name,
"<-function(x) {",
func_def,
"}")
parse(text = full_func) %>% eval()
test_func(2)
full_func
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH exp_tbl AS
(SELECT 1
UNION ALL
SELECT * FROM exp_tbl LIMIT 10))') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH exp_tbl AS
(SELECT 1
UNION ALL
SELECT * FROM exp_tbl LIMIT 10)') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH exp_tbl AS
(SELECT 1
UNION ALL
SELECT * FROM exp_tbl LIMIT 10)
SELECT * FROM exp_tbl') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE exert(x) AS (
SELECT 1
UNION ALL
SELECT exp(x+1) FROM exert WHERE x < 10
)
SELECT * FROM exert') %>%
View()
exp(2) * exp(10) / exp(0)
exp(2) * exp(10) / exp(1)
exp(2 + 10 - 1)
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE exert(x) AS (
SELECT 0
UNION ALL
SELECT exp(x+1) FROM exert WHERE x < 10
)
SELECT * FROM exert') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE exert(x) AS (
SELECT 1
UNION ALL
SELECT exp((x - 1) + 1) FROM exert WHERE x < 10
)
SELECT * FROM exert') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x) AS (
SELECT 1
UNION ALL
SELECT x+1 FROM ten WHERE x<10
)
SELECT * FROM ten;') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x) AS (
SELECT 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten;') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten;') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten;') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, sum(exp(x)) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT x, e, sum(e) FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT x, e, sum(e) OVER (PARTITION BY x) FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT x, e, sum(e) OVER (ORDER BY x) FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x), SUM(e) OVER (ORDER BY x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e, s) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x), SUM(e) OVER (ORDER BY x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e) AS (
SELECT 1, 1
UNION ALL
SELECT x+1, exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e, s) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x), exp(x) + exp(x + 1) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
dbGetQuery(conn = dbConnect(RSQLite::SQLite(), ""),
statement = 'WITH RECURSIVE ten(x, e, s) AS (
SELECT 1, 1, 1
UNION ALL
SELECT x+1, exp(x), exp(x - 1) + exp(x) FROM ten WHERE x<10
)
SELECT * FROM ten') %>%
View()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?ylim
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?parse
parse(c('a', 'b')[1])
eval(c('a', 'b')[1])
eval(!!c('a', 'b')[1])
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
metric_choices[1]
?selectInput
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?str_replace
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
